{"version":3,"sources":["webpack:///./src/pages/index.tsx"],"names":["HomePosts","IndexPage","props","width","data","header","childImageSharp","fluid","sizes","split","height","String","Number","aspectRatio","className","lang","config","title","name","content","description","property","siteUrl","src","facebook","twitter","SiteHeader","outer","style","backgroundImage","inner","logo","maxHeight","fixed","alt","isHome","id","SiteMain","PostFeed","PostFeedRaise","allMarkdownRemark","edges","map","post","key","node","fields","slug","children","pageQuery"],"mappings":"2TAwBMA,EAAS,gwBAoIAC,UAtEwC,SAAAC,GACrD,IAAMC,EAAQD,EAAME,KAAKC,OAAOC,gBAAgBC,MAAMC,MAAMC,MAAM,MAAM,GAAGA,MAAM,MAAM,GACjFC,EAASC,OAAOC,OAAOT,GAASD,EAAME,KAAKC,OAAOC,gBAAgBC,MAAMM,aAC9E,OACE,YAAC,IAAD,CAAaC,UAAS,GAAKd,GACzB,YAAC,IAAD,KACE,oBAAMe,KAAMC,IAAOD,OACnB,yBAAQC,IAAOC,OACf,oBAAMC,KAAK,cAAcC,QAASH,IAAOI,cACzC,oBAAMC,SAAS,eAAeF,QAASH,IAAOC,QAC9C,oBAAMI,SAAS,UAAUF,QAAQ,YACjC,oBAAME,SAAS,WAAWF,QAASH,IAAOC,QAC1C,oBAAMI,SAAS,iBAAiBF,QAASH,IAAOI,cAChD,oBAAMC,SAAS,SAASF,QAASH,IAAOM,UACxC,oBAAMD,SAAS,WAAWF,QAASjB,EAAME,KAAKC,OAAOC,gBAAgBC,MAAMgB,MAC3E,oBAAMF,SAAS,oBAAoBF,QAASH,IAAOQ,WACnD,oBAAMN,KAAK,eAAeC,QAAQ,wBAClC,oBAAMD,KAAK,gBAAgBC,QAASH,IAAOC,QAC3C,oBAAMC,KAAK,sBAAsBC,QAASH,IAAOI,cACjD,oBAAMF,KAAK,cAAcC,QAASH,IAAOM,UACzC,oBACEJ,KAAK,gBACLC,QAASjB,EAAME,KAAKC,OAAOC,gBAAgBC,MAAMgB,MAEnD,oBAAML,KAAK,eAAeC,QAAO,IAAMH,IAAOS,QAAQhB,MAAM,wBAAwB,KACpF,oBAAMY,SAAS,iBAAiBF,QAAShB,IACzC,oBAAMkB,SAAS,kBAAkBF,QAAST,KAE5C,YAAC,IAAD,KACE,sBACEI,UAAcY,IAAL,IAAmBC,IAC5BC,MAAO,CACLC,gBAAiB,QAAQ3B,EAAME,KAAKC,OAAOC,gBAAgBC,MAAMgB,IAAlD,OAGjB,mBAAKT,UAAS,GAAKgB,KACjB,YAAC,IAAD,KACE,YAAC,IAAD,KACG5B,EAAME,KAAK2B,KACV,mBACEH,MAAO,CAAEI,UAAW,QACpBT,IAAKrB,EAAME,KAAK2B,KAAKzB,gBAAgB2B,MAAMV,IAC3CW,IAAKlB,IAAOC,QAGdD,IAAOC,OAGX,YAAC,IAAD,KAAkBD,IAAOI,cAE3B,YAAC,IAAD,CAASe,QAAQ,MAGrB,oBAAMC,GAAG,YAAYtB,UAAcuB,IAAL,IAAiBV,KAC7C,mBAAKb,UAAS,GAAKgB,KACjB,mBAAKhB,UAAcwB,IAAL,IAAiBC,KAC5BrC,EAAME,KAAKoC,kBAAkBC,MAAMC,KAAI,SAAAC,GACtC,OAAO,YAAC,IAAD,CAAUC,IAAKD,EAAKE,KAAKC,OAAOC,KAAMJ,KAAMA,EAAKE,aAK/D3C,EAAM8C,SAEP,YAAC,IAAD,SAQD,IAAMC,EAAY","file":"component---src-pages-index-tsx-d699f888aec663c647f9.js","sourcesContent":["import { graphql } from 'gatsby';\nimport * as React from 'react';\nimport { css } from 'emotion'\nimport Helmet from 'react-helmet';\n\nimport Footer from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport PostCard from '../components/PostCard';\nimport Wrapper from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport config from '../website-config';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  PostFeedRaise,\n  SiteDescription,\n  SiteHeader,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n} from '../styles/shared';\nimport { PageContext } from '../templates/post';\n\nconst HomePosts = css`\n  @media (min-width: 795px) {\n    .post-card:nth-child(6n + 1):not(.no-image) {\n      flex: 1 1 100%;\n      flex-direction: row;\n    }\n\n    .post-card:nth-child(6n + 1):not(.no-image) .post-card-image-link {\n      position: relative;\n      flex: 1 1 auto;\n      border-radius: 5px 0 0 5px;\n    }\n\n    .post-card:nth-child(6n + 1):not(.no-image) .post-card-image {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n\n    .post-card:nth-child(6n + 1):not(.no-image) .post-card-content {\n      flex: 0 1 357px;\n    }\n\n    .post-card:nth-child(6n + 1):not(.no-image) h2 {\n      font-size: 2.6rem;\n    }\n\n    .post-card:nth-child(6n + 1):not(.no-image) p {\n      font-size: 1.8rem;\n      line-height: 1.55em;\n    }\n\n    .post-card:nth-child(6n + 1):not(.no-image) .post-card-content-link {\n      padding: 30px 40px 0;\n    }\n\n    .post-card:nth-child(6n + 1):not(.no-image) .post-card-meta {\n      padding: 0 40px 30px;\n    }\n  }\n`;\n\nexport interface IndexProps {\n  data: {\n    logo: {\n      childImageSharp: {\n        fixed: any;\n      };\n    };\n    header: {\n      childImageSharp: {\n        fluid: any;\n      };\n    };\n    allMarkdownRemark: {\n      edges: {\n        node: PageContext;\n      }[];\n    };\n  };\n}\n\nconst IndexPage: React.FunctionComponent<IndexProps> = props => {\n  const width = props.data.header.childImageSharp.fluid.sizes.split(', ')[1].split('px')[0];\n  const height = String(Number(width) / props.data.header.childImageSharp.fluid.aspectRatio);\n  return (\n    <IndexLayout className={`${HomePosts}`}>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>{config.title}</title>\n        <meta name=\"description\" content={config.description} />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={config.title} />\n        <meta property=\"og:description\" content={config.description} />\n        <meta property=\"og:url\" content={config.siteUrl} />\n        <meta property=\"og:image\" content={props.data.header.childImageSharp.fluid.src} />\n        <meta property=\"article:publisher\" content={config.facebook} />\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={config.title} />\n        <meta name=\"twitter:description\" content={config.description} />\n        <meta name=\"twitter:url\" content={config.siteUrl} />\n        <meta\n          name=\"twitter:image\"\n          content={props.data.header.childImageSharp.fluid.src}\n        />\n        <meta name=\"twitter:site\" content={`@${config.twitter.split('https://twitter.com/')[0]}`} />\n        <meta property=\"og:image:width\" content={width} />\n        <meta property=\"og:image:height\" content={height} />\n      </Helmet>\n      <Wrapper>\n        <header\n          className={`${SiteHeader} ${outer}`}\n          style={{\n            backgroundImage: `url('${props.data.header.childImageSharp.fluid.src}')`,\n          }}\n        >\n          <div className={`${inner}`}>\n            <SiteHeaderContent>\n              <SiteTitle>\n                {props.data.logo ? (\n                  <img\n                    style={{ maxHeight: '45px' }}\n                    src={props.data.logo.childImageSharp.fixed.src}\n                    alt={config.title}\n                  />\n                ) : (\n                  config.title\n                )}\n              </SiteTitle>\n              <SiteDescription>{config.description}</SiteDescription>\n            </SiteHeaderContent>\n            <SiteNav isHome={true} />\n          </div>\n        </header>\n        <main id=\"site-main\" className={`${SiteMain} ${outer}`}>\n          <div className={`${inner}`}>\n            <div className={`${PostFeed} ${PostFeedRaise}`}>\n              {props.data.allMarkdownRemark.edges.map(post => {\n                return <PostCard key={post.node.fields.slug} post={post.node} />;\n              })}\n            </div>\n          </div>\n        </main>\n        {props.children}\n\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport default IndexPage;\n\nexport const pageQuery = graphql`\n  query {\n    logo: file(relativePath: { eq: \"img/ghost-logo.png\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    header: file(relativePath: { eq: \"img/blog-cover.jpg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fluid(maxWidth: 2000) {\n          ...GatsbyImageSharpFluid\n        }\n      }\n    }\n    allMarkdownRemark(limit: 1000, sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          timeToRead\n          frontmatter {\n            title\n            date\n            tags\n            image {\n              childImageSharp {\n                fluid(maxWidth: 3720) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            author {\n              id\n              bio\n              avatar {\n                children {\n                  ... on ImageSharp {\n                    fixed(quality: 100) {\n                      src\n                    }\n                  }\n                }\n              }\n            }\n          }\n          excerpt\n          fields {\n            layout\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}